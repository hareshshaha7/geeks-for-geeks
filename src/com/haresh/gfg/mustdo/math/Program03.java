package com.haresh.gfg.mustdo.math;

/*
    A Simple Fraction
    Medium Accuracy: 48.0% Submissions: 20758 Points: 4
    https://practice.geeksforgeeks.org/problems/a-simple-fraction0921/1

    Given a fraction. Convert it into a decimal.
    If the fractional part is repeating, enclose the repeating part in parentheses.

    Example 1:
    Input: numerator = 1, denominator = 3
    Output: "0.(3)"
    Explanation: 1/3 = 0.3333... So here 3 is
    recurring.

    Example 2:
    Input: numerator = 5, denominator = 2
    Output: "2.5"
    Explanation: 5/2 = 2.5

    Your Task:
        You don't need to read or print anyhting. Your task is to complete the function fractionToDecimal()
        which takes numerator and denominator as input parameter and returns its decimal form in string format.

    Note: In case, the numerator is divisible by the denominator, just print the integer value.
        Expected Time Compelxity: O(k) where k is constant.
        Expected Space Complexity: O(k)

    Constraints:
        1 ≤ numerator, denominator ≤ 2000
 */

import java.util.HashMap;
import java.util.Map;

/**
 * @author Haresh Shaha
 * @since 23-Jan-2022
 */
public class Program03 {

    // Driver code
    public static void main(String[] args) {
        int num = 22;
        int den = 07;

        String resString1 = calculateFraction(num, den);

        num = -1;
        den = 2;

        String resString2 = calculateFraction(num, den);

        System.out.println(resString1);
        System.out.println(resString2);
    }

    // Function to return the required fraction in string format
    public static String calculateFraction(int num, int den) {
        if (num == 0)
            return "0"; // if numerator is zero
        if (den == 0)
            return ""; // if denominator is zero

        // result StringBuilder
        StringBuilder result = new StringBuilder();
        if ((num < 0) ^ (den < 0))
            result.append("-"); // check -ve sign

        // absolute values of num and den
        num = Math.abs(num);
        den = Math.abs(den);

        long quo = num / den; // Quotient
        long rem = num % den * 10; // calculating remainder

        result.append(
                String.valueOf(quo)); // appending quotient
        if (rem == 0)
            return result
                    .toString(); // return if remainder is 0

        // if remainder is not zero, continue
        result.append(".");
        // map for storing remainder and the indexes of the appropriate decimal in stringbuilder
        Map<Long, Integer> m
                = new HashMap<>();

        while (rem != 0) {

            if (m.containsKey(rem)) {

                // if the rem is already present, find the index and append ( )
                int index = m.get(rem);
                String part1 = result.substring(0, index);
                String part2 = "("
                        + result.substring(
                        index, result.length())
                        + ")";
                return part1 + part2;
            }

            // continue updating the map and appending quo which was generated by dividing rem with den
            m.put(rem, result.length());
            quo = rem / den;
            result.append(String.valueOf(quo));

            // update rem
            rem = (rem % den) * 10;
        }
        return result.toString();
    }
}
